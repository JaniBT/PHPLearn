// Clearing the MongoDB Shell

cls

// CreateDatabase

use nameOfDatabase
db.nameOfDatabase.createCollection("students")

// delete collection

db.students.drop()

// Important: You insert data into the created collection not into the database itself!

// Insert Data

db.students.insertOne({data: "Datas" etc...})

// Insert More than One Data

db.students.insertMany([{data: "data", etc...}, {data: "data", etc...}, {data: "data", etc...}])

// DataTypes

db.students.insertOne({
    name: "Larry",  // String
    age: 32,   // integer
    gpa: 2.8,   // float or double
    fullTime: false,   // boolean
    registerDate: new Date(),   // DATE
    graduationDate: null}),   // Null Value, (will be changed later probably)
    courses: ["Biology", "Chemistry", "Calculus"], // Array, can contain multiple characters
    address: {street: "123 Fake St.", city: "Bikini Bottom", zip: 1234}}) // Object, can contain multiple key value pairs

// Sorting or limiting documents

db.students.find().sort({name: 1})  // Alphabetical Order
db.students.find().sort({name: -1})  // Reverse Alphabetical

db.students.find().sort({gpa: 1}) // Ascended Order
db.students.find().sort({gpa: -1})  // Descended Order

Limiting:

db.students.find().limit(`LimitNumber, for example`: 2)

Combining the two:

db.students.find().sort({name: 1}).limit(2) // for example

// Find method:

db.students.find({name: "Larry"}) // Search for a specific name
db.students.find({gpa: 2.8, fullTime: false}) // Filter the search by more than one query argument

db.students.find({}, {_id: false, name: true}) // Filter search by only the prerequired data objects

// Update document/s

db.students.updateOne({name: "Larry"}, {$set: {fullTime: true}}) 

// updated the document which had the name value "Larry". $set means that it changes a key's value to something the user gives or if the key doesn't exist it creates it for the document

db.students.updateOne({_id: ObjectId('6624e622a9005de47f117b7d')}, {$unset: {fullTime: ""}}) // You can unset a key with the "$unset" method. In this example the document with the targeted id now doesn't have a fullTime parameter


// Update Many:

db.students.updateMany({}, {$set: {fullTime: false}}) // Here when you write a blank set of braces all of the documents's fullTime key will be changed to false

db.students.updateMany({fullTime: {$exists: false}}, {$set: {fullTime: true}})  // In this example we would like to update every document that doesn't have the fullTime key. The "$exists" operator does the finding of the documents that doesn't have the "fullTime" key and if it finds one, the "$set" operator will set the "fullTime" key to be true.


// Deleting a document

db.students.deleteOne({name: "Larry"}) // You can filter the delete

db.students.deleteMany({fullTime: false}) // Deletes every document that has a fullTime key set to false

db.students.deleteMany({registerDate: {$exists: false}}) // this deletes every document that doesn't have a registerDate key


// Comparison Operators

db.students.find({name: {$ne: "Spongebob"}}) // "$ne" means Not Equal, so if you write for example Spongebob there, it will show you every other document except for the given argument (here Spongebob).

db.students.find({age: {$lt: 30}}) // "$lt" means Less Than, (so it shows you every document that has the age key's value less than 30)

db.students.find({age: {$lte: 30}}) // "$lte" means Less Than Equal To

// -- Same with the greater than -- \\

db.students.find({age: {$gt: 30}}) // "$gt" means Greater Than

db.students.find({age: {$gte: 30}}) // "$gte" means Greater Than Equal To

// You can combine them to find documents within a certain range

db.students.find({gpa: {$gte: 3, $lte: 4}}) // gives back everything between the two


// You can even find documents with the "$in" operator. In this example if the name's value is equal to one of the array's values it will show up

db.students.find({name: {$in: ["Spongebob", "Sandy"]}})

// Same as before just the "$nin" means Not In. So It gives back everything except those that have the name's value as in the array

db.students.find({age: {$nin: ["Spongebob", "Sandy"]}})


// Logical Operators

db.students.find({$and: [{fullTime: true}, {age: {$lte: 35}}]}) // In this example we have two condition, this way it's easier to filter the datas we need. "$and" operator stands for AND, just like in MySQL

db.students.find({$or: [{fullTime: true}, {age: {$lte: 35}}]}) // This is the OR operator, it will give back a list if at least one of the conditions are true, and gives back false if neither of them is true

db.students.find({$nor: [{fullTime: false}, {age: {$lte: 15}}]}) // The $nor operator. It works like $and but here all of the conditions must be false to give back a result.

db.students.find({age: {$not: {$gte: 30}}}) // The $not operator. It gives back the opposite results of the condition. Like in this example, the $gte: 30 (greater than equal to 30) would give back everyone that is above or 30 years old, but because of the $not operator it gives back everyone who's less than 30 years old. IMPORTANT! $not Operator also gives back every document that has the age set to null, so it can become handy because of this.

// For execution Stats run the query like this:

db.students.find({name: "Larry"}).explain("executionStats")

.explain("executionStats") is the important part here.


// Indexes:

db.students.createIndex({name: 1}) // Create an index

// With index you can achieve faster results. It's a good thing but if you plan to update the datas frequently you should avoid this
// Use indexing when you are doing a lot of search but don't update the documents that frequently because it takes up more time and more memory.

db.students.getIndexes() // Shows all your indexes


// Collections

show collections // shows all the collections in a database

db.createCollection("students", {capped: true, size: 10000000, max: 100}, {autoIndexId: false}) // Create a custom collection. size is given number * 1024. (here it's 10MB), max is the size of the collection, so here it can be a max of 100 documents. And lastly autoIndexId stands for the basic indexing of the ObjectIds. You can turn it off by typing false or turn it on by typing true. (The default is set to true!)